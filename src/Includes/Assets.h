#ifndef ASSETS_H
#define ASSETS_H

#include <iostream>
#include <vector>
#include <map>
#include "Animation_Strings.h"

enum GAMETEXTURES {
	TEXTURE_tilefloor,
	TEXTURE_stones,
	TEXTURE_npc,
	TEXTURE_button,
	TEXTURE_door,
	TEXTURE_Warlock,
	TEXTURE_game_icon,
	TEXTURE_uno,
	TEXTURE_cuatro,
	TEXTURE_dos,
	TEXTURE_tres,
	TEXTURE_cero,
	TEXTURE_TENUM_TAXES,
	TEXTURE_TENUM_DISTURBANCE,
	TEXTURE_TENUM_SILENCE,
	TEXTURE_TENUM_DEATH_CLAWS,
	TEXTURE_TENUM_EXPLOSIVE,
	TEXTURE_TENUM_SPIRITS,
	TEXTURE_POT_FIRE_HUD,
	TEXTURE_POT_SHIELD_HUD,
	TEXTURE_POT_MP_HUD,
	TEXTURE_POT_ICE_HUD,
	TEXTURE_POT_POISON_HUD,
	TEXTURE_POT_THUNDER_HUD,
	TEXTURE_POT_HP_HUD,
	TEXTURE_SPELL_SPEED_HUD,
	TEXTURE_SPELL_DUMMY_HUD,
	TEXTURE_SPELL_CLEANSE_HUD,
	TEXTURE_SPELL_PROJECTILE_WIZARD_HUD,
	TEXTURE_SPELL_BLIZZARD_HUD,
	TEXTURE_SPELL_WALL_HUD,
	TEXTURE_SPELL_PROJECTILE_WARLOCK_HUD,
	TEXTURE_SPELL_TELEPORTBASE_HUD,
	TEXTURE_SPELL_THUNDER_HUD,
	TEXTURE_SPELL_FIRE_HUD,
	TEXTURE_SPELL_UNTARGET_HUD,
	TEXTURE_SPELL_POISON_HUD,
	TEXTURE_SPELL_DEFENSE_HUD,
	TEXTURE_SPELL_TELEPORT_HUD,
	TEXTURE_SPELL_INVISIBILITY_HUD,
	TEXTURE_BLOOD,
	TEXTURE_FUZZY,
	TEXTURE_HITLANDED,
	TEXTURE_decal,
	TEXTURE_skydome,
	TEXTURE_SPELL_WALL,
	TEXTURE_SPELL_THUNDER,
	TEXTURE_SPELL_FIRE,
	TEXTURE_SPELL_POISON,
	TEXTURE_SPELL_PROJECTILE,
	TEXTURE_gold,
	TEXTURE_grass,
	TEXTURE_bookcase,
	TEXTURE_white_floor,
	TEXTURE_POT_FIRE,
	TEXTURE_POT_MP,
	TEXTURE_POT_ICE,
	TEXTURE_POT_THUNDER,
	TEXTURE_POT_DEFENSE,
	TEXTURE_POT_POISON,
	TEXTURE_POT_HP,
	TEXTURE_gardenwall,
	TEXTURE_rock,
	TEXTURE_none,
	TEXTURE_Switch,
	TEXTURE_2897,
	TEXTURE_doorblocked,
	TEXTURE_Wizard,
	TEXTURE_marbre5,
	TEXTURE_negro,
	TEXTURE_yellow,
	TEXTURE_madera,
	TEXTURE_BOOK_BACKGROUND,
	TEXTURE_SHOP_BACKGROUND,
	TEXTURE_ALLIANCE_BACKGROUND,
	TEXTURE_BUTTON,
	TEXTURE_BUTTON_HOVER,
	TEXTURE_BUTTON_PRESSED,
	TEXTURE_GUI_CURSOR,
	TEXTURE_GUI_CURSOR_GLOW,
	TEXTURE_SHOP_SLOT,
	TEXTURE_WARLOCK_ALLIANCE,
	TEXTURE_WIZARD_ALLIANCE,
	TEXTURE_WARLOCK_ALLIANCE_HOVER,
	TEXTURE_WIZARD_ALLIANCE_HOVER,
	TEXTURE_OSPELLS_BANNER,
	TEXTURE_DSPELLS_BANNER,
	TEXTURE_TSPELLS_BANNER,
	TEXTURE_TRAPS_BANNER,
	TEXTURE_MENU_TITLE,
	TEXTURE_ORB_BACK,
	TEXTURE_ORB_FRONT,
	TEXTURE_ORB_FILL,
	TEXTURE_ORB_SCROLL_FILL,
	TEXTURE_ORB_SCROLL_LIP,
	TEXTURE_ORB_SCROLL_FILL_MASK,
	TEXTURE_SPELL_SLOT,
	TEXTURE_ITEM_SLOT,
	TEXTURE_ITEM_SLOT_MASK,

	TEXTURE_SIZE
};

static std::map<std::string, GAMETEXTURES> GAMETEXTURES_STR(){
	std::map<std::string, GAMETEXTURES> m;

	m["TEXTURE_tilefloor"]						= TEXTURE_tilefloor;	
	m["TEXTURE_stones"]							= TEXTURE_stones;	
	m["TEXTURE_npc"]							= TEXTURE_npc;	
	m["TEXTURE_button"]							= TEXTURE_button;	
	m["TEXTURE_door"]							= TEXTURE_door;	
	m["TEXTURE_Warlock"]						= TEXTURE_Warlock;	
	m["TEXTURE_game_icon"]						= TEXTURE_game_icon;
	m["TEXTURE_uno"]							= TEXTURE_uno;
	m["TEXTURE_cuatro"]							= TEXTURE_cuatro;
	m["TEXTURE_dos"]							= TEXTURE_dos; 
	m["TEXTURE_tres"]							= TEXTURE_tres;
	m["TEXTURE_cero"]							= TEXTURE_cero; 
	m["TEXTURE_TENUM_TAXES"]					= TEXTURE_TENUM_TAXES;
	m["TEXTURE_TENUM_DISTURBANCE"]				= TEXTURE_TENUM_DISTURBANCE;
	m["TEXTURE_TENUM_SILENCE"]					= TEXTURE_TENUM_SILENCE;
	m["TEXTURE_TENUM_DEATH_CLAWS"]				= TEXTURE_TENUM_DEATH_CLAWS;
	m["TEXTURE_TENUM_EXPLOSIVE"]				= TEXTURE_TENUM_EXPLOSIVE;
	m["TEXTURE_TENUM_SPIRITS"]					= TEXTURE_TENUM_SPIRITS;
	m["TEXTURE_POT_FIRE_HUD"]					= TEXTURE_POT_FIRE_HUD;
	m["TEXTURE_POT_SHIELD_HUD"]					= TEXTURE_POT_SHIELD_HUD;
	m["TEXTURE_POT_MP_HUD"]						= TEXTURE_POT_MP_HUD;
	m["TEXTURE_POT_ICE_HUD"]					= TEXTURE_POT_ICE_HUD;
	m["TEXTURE_POT_POISON_HUD"]					= TEXTURE_POT_POISON_HUD;
	m["TEXTURE_POT_THUNDER_HUD"]				= TEXTURE_POT_THUNDER_HUD;
	m["TEXTURE_POT_HP_HUD"]						= TEXTURE_POT_HP_HUD;
	m["TEXTURE_SPELL_SPEED_HUD"]				= TEXTURE_SPELL_SPEED_HUD;
	m["TEXTURE_SPELL_DUMMY_HUD"]				= TEXTURE_SPELL_DUMMY_HUD;
	m["TEXTURE_SPELL_CLEANSE_HUD"]				= TEXTURE_SPELL_CLEANSE_HUD;
	m["TEXTURE_SPELL_PROJECTILE_WIZARD_HUD"]	= TEXTURE_SPELL_PROJECTILE_WIZARD_HUD;
	m["TEXTURE_SPELL_BLIZZARD_HUD"]				= TEXTURE_SPELL_BLIZZARD_HUD;
	m["TEXTURE_SPELL_WALL_HUD"]					= TEXTURE_SPELL_WALL_HUD;
	m["TEXTURE_SPELL_PROJECTILE_WARLOCK_HUD"]	= TEXTURE_SPELL_PROJECTILE_WARLOCK_HUD;
	m["TEXTURE_SPELL_TELEPORTBASE_HUD"]			= TEXTURE_SPELL_TELEPORTBASE_HUD;
	m["TEXTURE_SPELL_THUNDER_HUD"]				= TEXTURE_SPELL_THUNDER_HUD;
	m["TEXTURE_SPELL_FIRE_HUD"]					= TEXTURE_SPELL_FIRE_HUD;
	m["TEXTURE_SPELL_UNTARGET_HUD"]				= TEXTURE_SPELL_UNTARGET_HUD;
	m["TEXTURE_SPELL_POISON_HUD"]				= TEXTURE_SPELL_POISON_HUD;
	m["TEXTURE_SPELL_DEFENSE_HUD"]				= TEXTURE_SPELL_DEFENSE_HUD;
	m["TEXTURE_SPELL_TELEPORT_HUD"]				= TEXTURE_SPELL_TELEPORT_HUD;
	m["TEXTURE_SPELL_INVISIBILITY_HUD"]			= TEXTURE_SPELL_INVISIBILITY_HUD;
	m["TEXTURE_BLOOD"]							= TEXTURE_BLOOD;
	m["TEXTURE_FUZZY"]							= TEXTURE_FUZZY;
	m["TEXTURE_HITLANDED"]						= TEXTURE_HITLANDED;
	m["TEXTURE_decal"]							= TEXTURE_decal;	
	m["TEXTURE_skydome"]						= TEXTURE_skydome;
	m["TEXTURE_SPELL_WALL"]						= TEXTURE_SPELL_WALL;
	m["TEXTURE_SPELL_THUNDER"]					= TEXTURE_SPELL_THUNDER;
	m["TEXTURE_SPELL_FIRE"]						= TEXTURE_SPELL_FIRE;
	m["TEXTURE_SPELL_POISON"]					= TEXTURE_SPELL_POISON;
	m["TEXTURE_SPELL_PROJECTILE"]				= TEXTURE_SPELL_PROJECTILE;
	m["TEXTURE_gold"]							= TEXTURE_gold;	
	m["TEXTURE_grass"]							= TEXTURE_grass;	
	m["TEXTURE_bookcase"]						= TEXTURE_bookcase;	
	m["TEXTURE_white_floor"]					= TEXTURE_white_floor;
	m["TEXTURE_POT_FIRE"]						= TEXTURE_POT_FIRE;
	m["TEXTURE_POT_MP"]							= TEXTURE_POT_MP;
	m["TEXTURE_POT_ICE"]						= TEXTURE_POT_ICE;
	m["TEXTURE_POT_THUNDER"]					= TEXTURE_POT_THUNDER;
	m["TEXTURE_POT_DEFENSE"]					= TEXTURE_POT_DEFENSE;
	m["TEXTURE_POT_POISON"]						= TEXTURE_POT_POISON;
	m["TEXTURE_POT_HP"]							= TEXTURE_POT_HP;
	m["TEXTURE_gardenwall"]						= TEXTURE_gardenwall;	
	m["TEXTURE_rock"]							= TEXTURE_rock;	
	m["TEXTURE_none"]							= TEXTURE_none;	
	m["TEXTURE_Switch"]							= TEXTURE_Switch;	
	m["TEXTURE_2897"]							= TEXTURE_2897;	
	m["TEXTURE_doorblocked"]					= TEXTURE_doorblocked;	
	m["TEXTURE_Wizard"]							= TEXTURE_Wizard;	
	m["TEXTURE_marbre5"]						= TEXTURE_marbre5;	
	m["TEXTURE_negro"]							= TEXTURE_negro;	
	m["TEXTURE_yellow"]							= TEXTURE_yellow;	
	m["TEXTURE_madera"]							= TEXTURE_madera;	
	m["TEXTURE_BUTTON"]							= TEXTURE_BUTTON;
	m["TEXTURE_BUTTON_HOVER"]					= TEXTURE_BUTTON_HOVER;
	m["TEXTURE_BUTTON_PRESSED"]					= TEXTURE_BUTTON_PRESSED;
	m["TEXTURE_SHOP_BACKGROUND"]				= TEXTURE_SHOP_BACKGROUND;
	m["TEXTURE_SHOP_SLOT"]						= TEXTURE_SHOP_SLOT;
	m["TEXTURE_ALLIANCE_BACKGROUND"]			= TEXTURE_ALLIANCE_BACKGROUND;
	m["TEXTURE_BOOK_BACKGROUND"]				= TEXTURE_BOOK_BACKGROUND;
	m["TEXTURE_GUI_CURSOR"]						= TEXTURE_GUI_CURSOR;
	m["TEXTURE_GUI_CURSOR_GLOW"]				= TEXTURE_GUI_CURSOR_GLOW;
	m["TEXTURE_WARLOCK_ALLIANCE"]				= TEXTURE_WARLOCK_ALLIANCE;
	m["TEXTURE_WIZARD_ALLIANCE"]				= TEXTURE_WIZARD_ALLIANCE;
	m["TEXTURE_WARLOCK_ALLIANCE_HOVER"]			= TEXTURE_WARLOCK_ALLIANCE_HOVER;
	m["TEXTURE_WIZARD_ALLIANCE_HOVER"]			= TEXTURE_WIZARD_ALLIANCE_HOVER;
	m["TEXTURE_OSPELLS_BANNER"]					= TEXTURE_OSPELLS_BANNER;
	m["TEXTURE_DSPELLS_BANNER"]					= TEXTURE_DSPELLS_BANNER;
	m["TEXTURE_TSPELLS_BANNER"]					= TEXTURE_TSPELLS_BANNER;
	m["TEXTURE_TRAPS_BANNER"]					= TEXTURE_TRAPS_BANNER;
	m["TEXTURE_MENU_TITLE"]						= TEXTURE_MENU_TITLE;
	m["TEXTURE_ORB_BACK"]						= TEXTURE_ORB_BACK;
	m["TEXTURE_ORB_FRONT"]						= TEXTURE_ORB_FRONT;
	m["TEXTURE_ORB_FILL"]						= TEXTURE_ORB_FILL;
	m["TEXTURE_ORB_SCROLL_FILL"]				= TEXTURE_ORB_SCROLL_FILL;
	m["TEXTURE_ORB_SCROLL_LIP"]					= TEXTURE_ORB_SCROLL_LIP;
	m["TEXTURE_ORB_SCROLL_FILL_MASK"]			= TEXTURE_ORB_SCROLL_FILL_MASK;
	m["TEXTURE_SPELL_SLOT"]						= TEXTURE_SPELL_SLOT;
	m["TEXTURE_ITEM_SLOT"]						= TEXTURE_ITEM_SLOT;
	m["TEXTURE_ITEM_SLOT_MASK"]					= TEXTURE_ITEM_SLOT_MASK;

	return m;
}

enum GAMEMESHES {
	MESH_grail,
	MESH_WarlockArm,
	MESH_Wizard,
	MESH_door,
	MESH_fountain,
	MESH_button,
	MESH_WizardArm,
	MESH_potion,
	MESH_bomb,
	MESH_Warlock,
	MESH_npc,
	MESH_bookcase,

	MESH_SIZE
};

static std::map<std::string, GAMEMESHES> GAMEMESHES_STR(){
	std::map<std::string, GAMEMESHES> m;

	m["MESH_grail"] 		= MESH_grail;
	m["MESH_WarlockArm"] 	= MESH_WarlockArm;
	m["MESH_Wizard"] 		= MESH_Wizard;
	m["MESH_door"] 			= MESH_door;
	m["MESH_fountain"] 		= MESH_fountain;
	m["MESH_button"] 		= MESH_button;
	m["MESH_WizardArm"] 	= MESH_WizardArm;
	m["MESH_potion"] 		= MESH_potion;
	m["MESH_bomb"] 			= MESH_bomb;
	m["MESH_Warlock"] 		= MESH_Warlock;
	m["MESH_npc"] 			= MESH_npc;
	m["MESH_bookcase"] 		= MESH_bookcase;

	return m;
}

enum GAMEANIMATIONS {
	ANIM_WIZARD_TSHOOT1,
	ANIM_WIZARD_TSHOOT2,
	ANIM_WIZARD_TSHOOT3,
	ANIM_WIZARD_TDRINK,
	ANIM_WIZARD_TINTERACT,
	ANIM_WIZARD_TIDLE,
	ANIM_WIZARD_BIDLE,
	ANIM_WIZARD_TWALK,
	ANIM_WIZARD_BWALK,
	ANIM_WIZARD_TRUN,
	ANIM_WIZARD_BRUN,
	ANIM_WIZARD_ARMIDLE,
	ANIM_WIZARD_ARMSHOOT1,
	ANIM_WIZARD_ARMWALK,
};

static std::vector<std::string> CREATE_ANIMATIONMAP(){
	std::vector<std::string> m;

	// INSERT ALL ANIMATIONS
	m.insert( m.end(), AWIZARD_TSHOOT1.begin(), AWIZARD_TSHOOT1.end() );
    m.insert( m.end(), AWIZARD_TSHOOT2.begin(), AWIZARD_TSHOOT2.end() );
    m.insert( m.end(), AWIZARD_TSHOOT3.begin(), AWIZARD_TSHOOT3.end() );
    m.insert( m.end(), AWIZARD_TDRINK.begin(), AWIZARD_TDRINK.end() );
    m.insert( m.end(), AWIZARD_TINTERACT.begin(), AWIZARD_TINTERACT.end() );
	
    m.insert( m.end(), AWIZARD_TIDLE.begin(), AWIZARD_TIDLE.end() );
    m.insert( m.end(), AWIZARD_BIDLE.begin(), AWIZARD_BIDLE.end() );
    m.insert( m.end(), AWIZARD_TWALK.begin(), AWIZARD_TWALK.end() );
    m.insert( m.end(), AWIZARD_BWALK.begin(), AWIZARD_BWALK.end() );
    m.insert( m.end(), AWIZARD_TRUN.begin(), AWIZARD_TRUN.end() );
    m.insert( m.end(), AWIZARD_BRUN.begin(), AWIZARD_BRUN.end() );

    m.insert( m.end(), AWIZARD_ARMWALK.begin(), AWIZARD_ARMWALK.end() );
    m.insert( m.end(), AWIZARD_ARMIDLE.begin(), AWIZARD_ARMIDLE.end() );
    m.insert( m.end(), AWIZARD_ARMSHOOT1.begin(), AWIZARD_ARMSHOOT1.end() );

	return m;
}

static std::vector<std::string> ANIMATIONMAP = CREATE_ANIMATIONMAP();

static std::map<std::string, GAMETEXTURES> GAMETEXTURES_String = GAMETEXTURES_STR();
static std::map<GAMETEXTURES, std::string> TEXTUREMAP;

static std::map<std::string, GAMEMESHES> GAMEMESHES_String = GAMEMESHES_STR();
static std::map<GAMEMESHES, std::string> MESHMAP;


#endif